status ="vacant")
absent <- data.frame(supervisor = status$absent,
date = extract_date(text),
status ="absent")
present <- data.frame(supervisor = status$present,
date = extract_date(text),
status ="present")
df <- rbind(df, vacant, absent, present)
}
# List Loop to Data Frame
require(pdftools)
require(stringr)
source("functions2.R")
files <- list.files(path ="pdf2", "\\.pdf")
file_path <- paste0("pdf2/",files[[1]])
text <- pdftools::pdf_text(file_path)
df2 <- df
files <- list.files(path ="pdf2", "\\.pdf")
file_path <- paste0("pdf2/",files[[1]])
text <- pdftools::pdf_text(file_path)
status <- list(
vacant = (if(!is.null(
if(sum(is.na(extract_vacant(text))) == 0){
extract_vacant(text)})
){extract_vacant(text)} else{
NA
}),
absent = (if(!is.null(
if(sum(is.na(extract_absent(text))) == 0){
extract_absent(text)})
){extract_absent(text)} else{
NA
}),
present = (if(!is.null(
if(sum(is.na(extract_present(text))) == 0){
extract_present(text)})
){extract_present(text)} else{
NA
})
)
vacant <- data.frame(supervisor = status$vacant,
date = extract_date(text),
status ="vacant")
absent <- data.frame(supervisor = status$absent,
date = extract_date(text),
status ="absent")
present <- data.frame(supervisor = status$present,
date = extract_date(text),
status ="present")
df <- rbind(vacant, absent, present)
for(i in 2:length(files)){
file_path <- paste0("pdfs/",files[[i]])
text <- pdftools::pdf_text(file_path)
status <- list(
vacant = (if(!is.null(
if(sum(is.na(extract_vacant(text))) == 0){
extract_vacant(text)})
){extract_vacant(text)} else{
NA
}),
absent = (if(!is.null(
if(sum(is.na(extract_absent(text))) == 0){
extract_absent(text)})
){extract_absent(text)} else{
NA
}),
present = (if(!is.null(
if(sum(is.na(extract_present(text))) == 0){
extract_present(text)})
){extract_present(text)} else{
NA
})
)
vacant <- data.frame(supervisor = status$vacant,
date = extract_date(text),
status ="vacant")
absent <- data.frame(supervisor = status$absent,
date = extract_date(text),
status ="absent")
present <- data.frame(supervisor = status$present,
date = extract_date(text),
status ="present")
df <- rbind(df, vacant, absent, present)
}
for(i in 2:length(files)){
file_path <- paste0("pdf2/",files[[i]])
text <- pdftools::pdf_text(file_path)
status <- list(
vacant = (if(!is.null(
if(sum(is.na(extract_vacant(text))) == 0){
extract_vacant(text)})
){extract_vacant(text)} else{
NA
}),
absent = (if(!is.null(
if(sum(is.na(extract_absent(text))) == 0){
extract_absent(text)})
){extract_absent(text)} else{
NA
}),
present = (if(!is.null(
if(sum(is.na(extract_present(text))) == 0){
extract_present(text)})
){extract_present(text)} else{
NA
})
)
vacant <- data.frame(supervisor = status$vacant,
date = extract_date(text),
status ="vacant")
absent <- data.frame(supervisor = status$absent,
date = extract_date(text),
status ="absent")
present <- data.frame(supervisor = status$present,
date = extract_date(text),
status ="present")
df <- rbind(df, vacant, absent, present)
}
View(df)
View(df)
View(df2)
df$date2 <- as.Date(df$date, "%B %d, %Y")
View(df)
min(df$date2)
max(df$date2)
View(df)
factor(df$supervisor)
df$supervisor <- factor(df$supervisor)
levels(df$supervisor)
hist(df$status)
hist(df$status)
plot(df$date2, df$status)
plot(df$date, df$status)
plot(df$date2, df$status)
library(ggplot2)
library(dplyr)
df %>%
ggplot(aes(supervisor, status)) + geom_col()
df %>%
ggplot(aes(supervisor, status)) + geom_bar()
df %>%
ggplot(aes(supervisor, status)) + geom_col()
df %>%
filter(supervisor == "BEAVER")
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor, status)) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor)) + geom_bar()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor)) + geom_bar(aes(status))
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor)) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor, status)) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor, status)) + geom_col(fill = status)
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor, status), fill = status) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor, status), fill = status) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor, status), color = status) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER") %>%
ggplot(aes(supervisor, status, fill = status)) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(supervisor, status, fill = status)) + geom_col()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status, fill = status)) +
geom_bar() +
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status, fill = status)) +
geom_bar()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status)) +
geom_bar()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status), fill = status) +
geom_bar()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status), color = status) +
geom_bar()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status), color = status) +
geom_bar(fill = status)
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status)) +
geom_bar(fill = status)
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status)) +
geom_bar()
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status)) +
geom_bar() + facet_wrap(~supervisor)
df %>%
filter(supervisor == "BEAVER" |
supervisor == "PEER" |
supervisor == "DIESTLER") %>%
ggplot(aes(status, fill = status)) +
geom_bar() + facet_wrap(~supervisor)
str_extract(text2, "ROLL CALL\\. ?.+(?=QUORUM)")
# Loop for 2011
# List Loop to Data Frame
require(pdftools)
require(stringr)
source("functions2.R")
folder <- "pdf2011"
files <- list.files(path =folder, "\\.pdf")
file_path <- paste0(folder, "/", files[[2]])
text <- pdftools::pdf_text(file_path)
extract_date(text)
text1 <- toupper(text)
text2 <- stringr::str_remove_all(text1, "\n")
str_extract(text2, "ROLL CALL\\. ?.+(?=QUORUM)")
text3 <- str_extract(text2, "ROLL CALL\\. ?.+(?=QUORUM)")
str_extract(text3, "ROLL CALL\\. ?.+")
str_extract(text3, "ROLL CALL\\. ?.+(?=PRESENT.)")
str_extract(text3, "ROLL CALL\\. ?.+(?=WERE PRESENT.)")
str_extract(text3, "ROLL CALL\\. ?.+(?=WERE PRESENT\\.)")
str_extract(text3, "ROLL CALL\\. ?.+ WERE PRESENT\\.")
str_extract(text3, "ROLL CALL\\. ?.+ WERE PRESENT")
str_extract_all(text3, "ROLL CALL\\. ?.+ WERE PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+ WERE PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+ PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE?.+PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE?+PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE\\sPRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE\sPRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE\s+PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE\\s+PRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE\\sPRESENT")
str_extract(text3, "ROLL CALL\\. ?.+WERE\\s+PRESENT")
text4 <- str_extract(text3, "ROLL CALL\\. ?.+WERE\\s+PRESENT")
str_extract(text4, "SUPERVISOR.+")
str_extract(text4, "SUPERVISOR.+\\WERE\\sPRESENT")
str_extract(text4, "SUPERVISOR.+\\WERE\\s+PRESENT")
str_extract(text4, "SUPERVISOR.+WERE\\s+PRESENT")
str_extract(text3, "SUPERVISOR.+WERE\\s+PRESENT")
text4 <- str_extract(text3, "SUPERVISOR.+WERE\\s+PRESENT")
str_replace(text4, "AND", ",")
str_replace(text4, " AND", ",")
str_squish(text4)
text1
text1
text2
str_squish(text2)
str_squish(text2)
text3 <- str_squish(text2)
str_extract(text3, "SUPERVISOR.+WERE\\s+PRESENT")
text2
text1
stringr::str_remove_all(text1, "\n")
str_squish(stringr::str_remove_all(text1, "\n"))
str_squish(text1)
text2 <- str_squish(text1)
str_extract(text2, "SUPERVISOR.+WERE\\s+PRESENT")
str_extract(text2, "ROLL CALL\\. ?.+(?=QUORUM)")
text3 <- str_extract(text2, "ROLL CALL\\. ?.+(?=QUORUM)")
text3
str_extract(text3, "SUPERVISOR.+WERE\\s+PRESENT")
text4 <- str_extract(text3, "SUPERVISOR.+WERE\\s+PRESENT")
str_replace(text4, " AND", ",")
text5 <- str_replace(text4, " AND", ",")
text5
extract_present <- function(txt){
txt1 <- toupper(txt)
txt2 <- str_squish(txt1)
txt3 <- str_extract(txt2, "ROLL CALL\\. ?.+(?=QUORUM)")
txt4 <- str_extract(txt3, "SUPERVISOR.+WERE\\s+PRESENT")
txt5 <- str_replace(txt4, " AND", ",")
return(txt5)
}
extract_present(text)
extract_present(text)[[1]]
extract_present(text)[1]
extract_absent(text)
extract_present(text)[1]
extract_present(text)
str_remove(text5, "SUPERVISOR|SUPERVISORS")
str_remove(text5, "SUPERVISOR |SUPERVISORS ")
str_remove(text5, "SUPERVISOR |SUPERVISORS ")
text6 <- str_remove(text5, "SUPERVISOR |SUPERVISORS ")
str_split(text, ",")
str_split(text6, ",")
str_remove(text5, "WERE PRESENT |WAS PRESENT ")
str_remove(text6, "WERE PRESENT |WAS PRESENT ")
str_remove(text6, "WERE PRESENT |WAS PRESENT ")
str_remove(text6, "WERE PRESENT|WAS PRESENT")
<- str_remove(text6, "WERE PRESENT\\s|WAS PRESENT\\s")
str_remove(text6, "WERE PRESENT\\s|WAS PRESENT\\s")
str_remove(text6, "WERE PRESENT|WAS PRESENT")
text7 <- str_remove(text6, "WERE PRESENT|WAS PRESENT")
str_split(text7, ",")
text8 <- str_split(text7, ",")
text8
text8[[1]]
extract_present <- function(txt){
txt1 <- toupper(txt)
txt2 <- str_squish(txt1)
txt3 <- str_extract(txt2, "ROLL CALL\\. ?.+(?=QUORUM)")
txt4 <- str_extract(txt3, "SUPERVISOR.+WERE\\s+PRESENT")
txt5 <- str_replace(txt4, " AND", ",")
txt6 <- str_remove(txt5, "SUPERVISOR |SUPERVISORS ")
txt7 <- str_remove(txt6, "WERE PRESENT|WAS PRESENT")
txt8 <- str_split(txt7, ",")
return(txt8[[1]])
}
extract_present(text)
text8 <- str_split(text7, ",")
text8[[1]]
str_squish(text8)
str_remove_all(text8, "\\s")
text7
str_remove_all(text7, "\\s")
text9 <- str_split(text8, ",")
text8 <- str_remove_all(text7, "\\s")
text9 <- str_split(text8, ",")
text9
extract_present <- function(txt){
txt1 <- toupper(txt)
txt2 <- str_squish(txt1)
txt3 <- str_extract(txt2, "ROLL CALL\\. ?.+(?=QUORUM)")
txt4 <- str_extract(txt3, "SUPERVISOR.+WERE\\s+PRESENT")
txt5 <- str_replace(txt4, " AND", ",")
txt6 <- str_remove(txt5, "SUPERVISOR |SUPERVISORS ")
txt7 <- str_remove(txt6, "WERE PRESENT|WAS PRESENT")
txt8 <- str_remove_all(txt7, "\\s")
txt9 <- str_split(txt8, ",")
return(txt9)
}
extract_present(text)
return(txt9[[1]])
extract_present <- function(txt){
txt1 <- toupper(txt)
txt2 <- str_squish(txt1)
txt3 <- str_extract(txt2, "ROLL CALL\\. ?.+(?=QUORUM)")
txt4 <- str_extract(txt3, "SUPERVISOR.+WERE\\s+PRESENT")
txt5 <- str_replace(txt4, " AND", ",")
txt6 <- str_remove(txt5, "SUPERVISOR |SUPERVISORS ")
txt7 <- str_remove(txt6, "WERE PRESENT|WAS PRESENT")
txt8 <- str_remove_all(txt7, "\\s")
txt9 <- str_split(txt8, ",")
return(txt9[[1]])
}
extract_present(text)
extract_present <- function(txt){
txt1 <- toupper(txt)
# Remove whitespace around the text and new lines (I think)
txt2 <- str_squish(txt1)
# Pull anything from "ROLL CALL." that is followed by "QUORUM"
txt3 <- str_extract(txt2, "ROLL CALL\\. ?.+(?=QUORUM)")
# Find the names of the supervisors who were present or the supervisor who was present
txt4 <- str_extract(txt3, "SUPERVISOR.+WERE\\s+PRESENT|SUPERVISOR.+WAS\\s+PRESENT")
# Replace the word AND with a comma for seperation (will create an empty space)
# This empty space will look like ", ," with or without the actuall " ".
txt5 <- str_replace(txt4, " AND", ",")
# Remove where it says either SUPERVISOR or SUPERVISORS
txt6 <- str_remove(txt5, "SUPERVISOR |SUPERVISORS ")
# Remove where it says either WERE PRESENT or WAS PRESENT
txt7 <- str_remove(txt6, "WERE PRESENT|WAS PRESENT")
# Remove all extra whitespace (It does not work the same with str_squish() )
txt8 <- str_remove_all(txt7, "\\s")
# Split the string into smaller strings deliminated by commas
txt9 <- str_split(txt8, ",")
# Return the first set of values in the list of strings
return(txt9[[1]])
}
extract_present(text)
extract_present <- function(txt){
txt1 <- toupper(txt)
# Remove whitespace around the text and new lines (I think)
txt2 <- str_squish(txt1)
# Pull anything from "ROLL CALL." that is followed by "QUORUM"
txt3 <- str_extract(txt2, "ROLL CALL\\. ?.+(?=QUORUM)")
# Find the names of the supervisors who were present or the supervisor who was present
txt4 <- str_extract(txt3, "SUPERVISOR.+WERE\\s+PRESENT|SUPERVISOR.+WAS\\s+PRESENT|SUPERVISOR.+\\s+PRESENT")
# Replace the word AND with a comma for seperation (will create an empty space)
# This empty space will look like ", ," with or without the actuall " ".
txt5 <- str_replace(txt4, " AND", ",")
# Remove where it says either SUPERVISOR or SUPERVISORS
txt6 <- str_remove(txt5, "SUPERVISOR |SUPERVISORS ")
# Remove where it says either WERE PRESENT or WAS PRESENT
txt7 <- str_remove(txt6, "WERE PRESENT|WAS PRESENT")
# Remove all extra whitespace (It does not work the same with str_squish() )
txt8 <- str_remove_all(txt7, "\\s")
# Split the string into smaller strings deliminated by commas
txt9 <- str_split(txt8, ",")
# Return the first set of values in the list of strings
return(txt9[[1]])
# This still requires:
#   Every pdf must have the characters "ROLL CALL." followed by
#     the supervisors who were present, absent, and/or vacant
#     and the characters "QUORUM" after all of it
# This is how we select the roll call area
#   Every pdf must say either WERE or WAS PRESENT
# Additionally:
#   Removing any empty/blank names between commas
#
}
extract_present(text)
# Loop for 2011
# List Loop to Data Frame
require(pdftools)
require(stringr)
source("functions2.R")
folder <- "pdf2011"
files <- list.files(path =folder, "\\.pdf")
file_path <- paste0(folder, "/", files[[2]])
text <- pdftools::pdf_text(file_path)
extract_date(text)
# Test - what if we just say "SUPERVISOR.+\\s+PRESENT"
#   Does this cause issues?
text1 <- toupper(text)
text2 <- str_squish(text1)
text3 <- str_extract(text2, "ROLL CALL\\. ?.+(?=QUORUM)")
str_extract(text3, "SUPERVISOR.+\\s+PRESENT")
str_extract(text3, "SUPERVISOR.+WERE+\\s+PRESENT")
extract_present <- function(txt){
txt1 <- toupper(txt)
# Remove whitespace around the text and new lines (I think)
txt2 <- str_squish(txt1)
# Pull anything from "ROLL CALL." that is followed by "QUORUM"
txt3 <- str_extract(txt2, "ROLL CALL\\. ?.+(?=QUORUM)")
# Find the names of the supervisors who were present or the supervisor who was present
txt4 <- str_extract(txt3, "SUPERVISOR.+WERE\\s+PRESENT|SUPERVISOR.+WAS\\s+PRESENT")
# Replace the word AND with a comma for seperation (will create an empty space)
# This empty space will look like ", ," with or without the actuall " ".
txt5 <- str_replace(txt4, " AND", ",")
# Remove where it says either SUPERVISOR or SUPERVISORS
txt6 <- str_remove(txt5, "SUPERVISOR |SUPERVISORS ")
# Remove where it says either WERE PRESENT or WAS PRESENT
txt7 <- str_remove(txt6, "WERE PRESENT|WAS PRESENT")
# Remove all extra whitespace (It does not work the same with str_squish() )
txt8 <- str_remove_all(txt7, "\\s")
# Split the string into smaller strings deliminated by commas
txt9 <- str_split(txt8, ",")
# Return the first set of values in the list of strings
return(txt9[[1]])
# This still requires:
#   Every pdf must have the characters "ROLL CALL." followed by
#     the supervisors who were present, absent, and/or vacant
#     and the characters "QUORUM" after all of it
# This is how we select the roll call area
#   Every pdf must say either WERE or WAS PRESENT
# Additionally:
#   Removing any empty/blank names between commas
#
}
extract_present(text)
extract_absent(text)
text1 <- toupper(text)
# Remove whitespace around the text and new lines (I think)
text2 <- str_squish(text1)
text2
# Pull anything from "ROLL CALL." that is followed by "QUORUM"
text3 <- str_extract(text2, "ROLL CALL\\. ?.+(?=QUORUM)")
text3
# Find the names of the supervisors who were present or the supervisor who was present
str_extract(text3, "SUPERVISOR.+WERE\\s+ABSENT|SUPERVISOR.+WAS\\s+ABSENT")
# Find the names of the supervisors who were present or the supervisor who was present
str_extract(text3, "PRESENT\\..+WERE\\s+ABSENT|SUPERVISOR.+WAS\\s+ABSENT")
